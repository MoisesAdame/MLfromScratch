# -*- coding: utf-8 -*-
"""KNN-MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-FW29fzbTTJtvpg-XK7QLRZNPXpgq8Yu
"""

from sklearn.datasets import load_digits
import numpy as np
from PIL import Image

mnist = load_digits()

def to_image(arr):
  # convert values to 0 - 255 int8 format
  formatted = arr * 16
  img = Image.fromarray(formatted).resize((100, 100))
  img.show()

def euc_dist(x1, x2):
  return np.sqrt(np.sum((x1-x2) ** 2))

class KNN:
  def __init__(self, k = 3):
    self.K = k

  def fit(self, x_train, y_train):
    self.X_train = x_train
    self.Y_train = y_train

  def predict(self, X_test):
    predictions = [] 
    for i in range(len(X_test)):
      dist = np.array([euc_dist(X_test[i], x_t) for x_t in self.X_train])
      dist_sorted = dist.argsort()[:self.K]
      neigh_count = {}
      for idx in dist_sorted:
        if self.Y_train[idx] in neigh_count:
          neigh_count[self.Y_train[idx]] += 1
        else:
          neigh_count[self.Y_train[idx]] = 1
      prediction_prob = np.zeros((10, 1))
      for key in neigh_count:
        prediction_prob[key] = neigh_count[key] / self.K
      predictions.append(np.argmax(prediction_prob))
    return predictions

main_data = mnist['images']
main_data = main_data.reshape((main_data.shape[0], main_data.shape[1] * main_data.shape[2]))

X_train = main_data[: 800]
Y_train = mnist['target'][:800]

my_knn = KNN()
my_knn.fit(X_train, Y_train)

X_test = main_data[801:]
predictions = my_knn.predict(X_test)

value = 321
to_image(X_test[value].reshape((8, 8)))
print(predictions[value])